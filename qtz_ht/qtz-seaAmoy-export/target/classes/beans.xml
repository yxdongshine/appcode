<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xsi:schemaLocation="
    		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
			http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.8.xsd
			" default-autowire="byName" default-lazy-init="false">
		<!-- Spring getBean定义 -->
	<bean id="springContextHolder" class="com.mall.core.common.SpringContextHolder" lazy-init="false"/>
	
		<!-- 生成长整形15位ID -->
	<bean id="fifteenLongId" class="com.mall.core.common.impl.FifteenLongIdImpl">
		<constructor-arg index="0">
	    	<value>10</value>
	    </constructor-arg>
	</bean>
	<!-- 以下 validator  ConversionService 在使用 mvc:annotation-driven 会 自动注册-->  
	  
	<!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->  
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">  
	    <property name="basenames">  
	        <list>  
	            <!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找  -->  
	            <value>classpath:config/messages</value>  
	        </list>  
	    </property>  
	    <property name="useCodeAsDefaultMessage" value="false"/>  
	    <property name="defaultEncoding" value="UTF-8"/>  
	    <property name="cacheSeconds" value="60"/>
	</bean>
	<!-- 拦截器配置 -->

<!-- 	 <mvc:interceptors> -->
<!-- 		<mvc:interceptor> -->
<!-- 			<mvc:mapping path="/v?.?/**" /> -->
<!-- 			<bean class="com.qtz.ht.report.interceptor.SecurityInterceptor"> -->
<!-- 				<property name="excludeUrls"> -->
<!-- 					<list value-type="java.lang.String"> -->
<!-- 						<value>/.*.html</value>   -->
<!-- 						<value>/v1.*/logout</value> -->
<!-- 						<value>/v1.*/login</value> -->
<!-- 					</list> -->
<!-- 				</property> -->
<!-- 			</bean> -->
<!-- 		</mvc:interceptor> -->
<!-- 	</mvc:interceptors> -->
	
	<mvc:annotation-driven />
	
	<!-- 注解的配置  -->
	<context:component-scan base-package="com.qtz.ht.report.controller"/>
	<context:component-scan base-package="com.qtz.ht.report.order">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	<context:component-scan base-package="com.qtz.ht.report.good">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	<context:component-scan base-package="com.qtz.ht.report.session">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	<!-- 属性文件读入 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/config/jdbc.properties</value>
			</list>
		</property>
	</bean>

	<mongo:mongo host="${mongo.host}" port="${mongo.port}">
    <mongo:options connections-per-host="200"
                   threads-allowed-to-block-for-connection-multiplier="100"
                   connect-timeout="2000"
                   max-wait-time="1500"
                   auto-connect-retry="true"
                   socket-keep-alive="true"
                   socket-timeout="5000"
                   slave-ok="true"
                   write-number="1"
                   write-timeout="0"
                   write-fsync="true"/>
  </mongo:mongo>
	<!-- mongo 配置 -->
	<mongo:db-factory id="anotherMongoDbFactory"  mongo-ref="mongo" dbname="${mongo.db}"/>
	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
		<constructor-arg name="mongoDbFactory" ref="anotherMongoDbFactory" />
		<constructor-arg name="mongoConverter" ref="mappingMongoConverter" />
	</bean>
	<bean id="mappingContext"
		class="org.springframework.data.mongodb.core.mapping.MongoMappingContext" />

	<bean id="mappingMongoConverter"
		class="org.springframework.data.mongodb.core.convert.MappingMongoConverter">
		<constructor-arg name="mongoDbFactory" ref="anotherMongoDbFactory" />
		<constructor-arg name="mappingContext" ref="mappingContext" />
		<property name="typeMapper" ref="defaultMongoTypeMapper" />
	</bean>

	<bean id="defaultMongoTypeMapper"
		class="org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper">
		<constructor-arg name="typeKey">
			<null />
		</constructor-arg>
	</bean>

	
	<!-- redis配置start -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis1.pool.maxIdle}" />
        <property name="timeBetweenEvictionRunsMillis" value="${redis1.pool.timeBetweenEvictionRunsMillis}" />
        <property name="minEvictableIdleTimeMillis" value="${redis1.pool.minEvictableIdleTimeMillis}" />
        <property name="testOnBorrow" value="${redis1.pool.testOnBorrow}" />
        <property name="maxTotal" value="${redis1.pool.maxTotal}" />
    </bean>
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" p:use-pool="true" p:database="${redis1.db}" p:host-name="${redis1.host}" p:port="${redis1.port}"  p:poolConfig-ref="jedisPoolConfig" p:timeout="${redis1.timeout}" />
	<bean id="redisStringTemplate" class="org.springframework.data.redis.core.StringRedisTemplate" p:connection-factory-ref="jedisConnectionFactory"/>
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
		p:connection-factory-ref="jedisConnectionFactory">
		<property name="KeySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
		</property>
	</bean>
	<!-- redis配置end -->
	
	<!-- 数据库连接池 配置  -->
	<bean id="htDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <property name="url" value="${htMysql.url}" />
	    <property name="username" value="${htMysql.username}" />
	    <property name="password" value="${htMysql.password}" />
	    <property name="filters" value="stat" />
	    <property name="maxActive" value="200" />
	    <property name="initialSize" value="20" />
	    <property name="maxWait" value="60000" />
	    <property name="minIdle" value="1" />
	    <property name="timeBetweenEvictionRunsMillis" value="3000" />
	    <property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	</bean>
	<!-- spring jdbc配置 -->
	<bean name="htJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="htDataSource" />
	</bean>

	<!-- 数据库连接池 配置  -->
	<bean id="orderDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <property name="url" value="${orderMysql.url}" />
	    <property name="username" value="${orderMysql.username}" />
	    <property name="password" value="${orderMysql.password}" />
	    <property name="filters" value="stat" />
	    <property name="maxActive" value="200" />
	    <property name="initialSize" value="20" />
	    <property name="maxWait" value="60000" />
	    <property name="minIdle" value="1" />
	    <property name="timeBetweenEvictionRunsMillis" value="3000" />
	    <property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	</bean>
	<!-- spring jdbc配置 -->
	<bean name="orderJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="orderDataSource" />
	</bean>
	
	<!-- start 日志aop 拦截器 -->
	<!-- service日志记录器 -->
	<bean id="loggerService" class="com.mall.core.aop.LoggerServiceAop" />
	<!-- dao日志记录器 -->
	<bean id="loggerDao" class="com.mall.core.aop.LoggerDaoAop" />
	<!--end 日志aop 拦截器 -->

	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
	    <property name="maxUploadSize" value="10485760"/>
	    <property name="defaultEncoding" value="UTF-8"/> 
	</bean>
</beans>
